package PhoneNetworkApp;


/*
   Student name :Renad Alsulami , Alya Bafarhan , Bayan Alfarsi , lama Alzahrani 
   secion: B9A
   CPCS-324 Algorithms and Data Structures (II)
   Group Project â€“ Part I
  
 */

import java.io.FileNotFoundException;
import GraphFramework.*;
import GraphFramework.KruskalAlg;
import java.util.Scanner;

public class PhoneNWDesignApp {

    
     
    public static void main(String[] args) throws FileNotFoundException {
        BluePrintsGraph PhLNetowrk = new BluePrintsGraph();
       // read from user
        Scanner readFrom = new Scanner(System.in);

        // welcome msg 
        System.out.println( "\t\t\t\tWELCOME TO OUR SYSTEM\n"
                + " where we will comput the minimum spanning tree using two algorithms: Min-heap based Prim's algorithm and Kruskal's algorithm.\n");

        System.out.println("\t\t  (1) Requirement 1 Using ReadfromGraph()  \n"
                + "\t\t  (2) Requirement 2 Using MakeGraph()      \n");

        // Read User Input for the Selected Requirement 
        System.out.print("Select Requirement Number :   ");

        int userInput = readFrom.nextInt(); // read from user Option of the Requirement
        
        
        // make sure user enter within option
        while (userInput != 1 && userInput != 2) {
            System.out.println("Wrong Selection. ");
            System.out.print("Select Requirement Number : ");
            userInput = readFrom.nextInt();
        }
        
        
        //Requirement 1
         if (userInput == 1) {
        PhLNetowrk.readGraphFromFile();
        
        System.out.println("\nThe phone network (minimum spanning tree) generated by Kruskal algorithm is as follows");
            KruskalAlg kkk = new KruskalAlg();    
            kkk.KruskalAlgo(PhLNetowrk); // Read Graph in Kruskal Algorithm

        
        System.out.println("\nThe phone network (minimum spanning tree) generated by Min-heap based Prim's algorithm is as follows:");
            MHPrimAlg pp = new MHPrimAlg(); // Read Graph in prim Algorithm
            pp.MSTPrimAlg(PhLNetowrk);
         }// End of Requirement 1

        
        //Requirement 2
        
         if (userInput == 2) {
      PhLNetowrk.makeGraph(10000, 25000);
               //kruskal Algorithm 
            System.out.println("\nThe phone network (minimum spanning tree) generated by Kruskal algorithm is as follows");

            KruskalAlg kkk = new KruskalAlg();
            double startTime = System.currentTimeMillis(); // Start time     
            kkk.KruskalAlgo(PhLNetowrk); 
            double endTime = System.currentTimeMillis() ;// End time  
            double totalTime = endTime - startTime; // Final time  
            System.out.println("Running time  for Kruskal Algorithm: " + totalTime);

            //Prim Algorithm
            System.out.println("\nThe phone network (minimum spanning tree) generated Min-heap based Prim's algorithm");

            MHPrimAlg pp = new MHPrimAlg(); 
            double StartTime = System.currentTimeMillis();//start time 
            pp.MSTPrimAlg(PhLNetowrk);
            double EndTime = System.currentTimeMillis();//start time  
            double TotalTime = EndTime - StartTime; // Final time  
            System.out.println("Running time for Min-heap Prim Algorithm: " + TotalTime);

        } // End of requerment 2 

        readFrom.close();
    }
}
